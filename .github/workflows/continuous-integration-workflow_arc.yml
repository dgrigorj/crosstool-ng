name: ARC_Crosstool_CI

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      linux:
        description:  Linux branch name
        required:     false
        default:      arc64
        type:         string
      gcc:
        description:  GCC branch name
        required:     false
        default:      arc-2022.03
        type:         string
      binutils:
        description:  Binutils branch name
        required:     false
        default:      arc-2022.03
        type:         string
      newlib:
        description:  Newlib branch name
        required:     false
        default:      arc-2022.03
        type:         string
      glibc:
        description:  Glibc branch name
        required:     false
        default:      arc64-2.34
        type:         string
      uclibc:
        description:  uClibc branch name
        required:     false
        default:      uclibc-arc32-wip
        type:         string


env:
  LINUX_REPO_URL:          "https://github.com/foss-for-synopsys-dwc-arc-processors/linux"
  LINUX_BRANCH_DEFAULT:    "arc64"
#  GCC_REPO_URL:            "https://github.com/foss-for-synopsys-dwc-arc-processors/gcc"
#  GCC_BRANCH_DEFAULT:      "arc-2022.03"
  GCC_REPO_URL:            "https://github.com/dgrigorj/gcc"
  GCC_BRANCH_DEFAULT:      "dgrigorj-arc-config-limit"
  BINUTILS_REPO_URL:       "https://github.com/foss-for-synopsys-dwc-arc-processors/binutils-gdb"
  BINUTILS_BRANCH_DEFAULT: "arc-2022.03"
  NEWLIB_REPO_URL:         "https://github.com/foss-for-synopsys-dwc-arc-processors/newlib"
  NEWLIB_BRANCH_DEFAULT:   "arc-2022.03"
  GLIBC_REPO_URL:          "https://github.com/foss-for-synopsys-dwc-arc-processors/glibc"
  GLIBC_BRANCH_DEFAULT:    "arc64-2.34"
  UCLIBC_REPO_URL:         "https://github.com/foss-for-synopsys-dwc-arc-processors/uClibc"
  UCLIBC_BRANCH_DEFAULT:   "uclibc-arc32-wip"


jobs:
  variables:
    runs-on: ubuntu-latest
    outputs:
      LINUX_COMMIT:     ${{ steps.variables.outputs.LINUX_COMMIT }}
      GCC_COMMIT:       ${{ steps.variables.outputs.GCC_COMMIT }}
      BINUTILS_COMMIT:  ${{ steps.variables.outputs.BINUTILS_COMMIT }}
      NEWLIB_COMMIT:    ${{ steps.variables.outputs.NEWLIB_COMMIT }}
      GLIBC_COMMIT:     ${{ steps.variables.outputs.GLIBC_COMMIT }}
      UCLIBC_COMMIT:    ${{ steps.variables.outputs.UCLIBC_COMMIT }}
    steps:
      - name: Set github parameters
        id: variables
        run: |
          echo "Setting Git variables"

          #manual run parameters
          LINUX_INPUT=${{ github.event.inputs.linux }}
          GCC_INPUT=${{ github.event.inputs.gcc }}
          BINUTILS_INPUT=${{ github.event.inputs.binutils }}
          NEWLIB_INPUT=${{ github.event.inputs.newlib }}
          GLIBC_INPUT=${{ github.event.inputs.glibc }}
          UCLIBC_INPUT=${{ github.event.inputs.uclibc }}

          #triggered parameters
          LINUX_BRANCH=${LINUX_INPUT:-"$LINUX_BRANCH_DEFAULT"}
          GCC_BRANCH=${GCC_INPUT:-"$GCC_BRANCH_DEFAULT"}
          BINUTILS_BRANCH=${BINUTILS_INPUT:-"$BINUTILS_BRANCH_DEFAULT"}
          NEWLIB_BRANCH=${NEWLIB_INPUT:-"$NEWLIB_BRANCH_DEFAULT"}
          GLIBC_BRANCH=${GLIBC_INPUT:-"$GLIBC_BRANCH_DEFAULT"}
          UCLIBC_BRANCH=${UCLIBC_INPUT:-"$UCLIBC_BRANCH_DEFAULT"}

          LINUX_COMMIT=$(git ls-remote $LINUX_REPO_URL $LINUX_BRANCH  | awk '{print $1}')
          GCC_COMMIT=$(git ls-remote $GCC_REPO_URL $GCC_BRANCH  | awk '{print $1}')
          BINUTILS_COMMIT=$(git ls-remote $BINUTILS_REPO_URL $BINUTILS_BRANCH | awk '{print $1}')
          NEWLIB_COMMIT=$(git ls-remote $NEWLIB_REPO_URL $NEWLIB_BRANCH | awk '{print $1}')
          GLIBC_COMMIT=$(git ls-remote $GLIBC_REPO_URL $GLIBC_BRANCH | awk '{print $1}')
          UCLIBC_COMMIT=$(git ls-remote $UCLIBC_REPO_URL $UCLIBC_BRANCH | awk '{print $1}')

          printf "Using Linux from:\n\trepo: $LINUX_REPO_URL\n\tbranch: $LINUX_BRANCH\n\tcommit: $LINUX_COMMIT\n"
          printf "Using GCC from:\n\trepo: $GCC_REPO_URL\n\tbranch: $GCC_BRANCH\n\tcommit: $GCC_COMMIT\n"
          printf "Using Binutils from:\n\trepo: $BINUTILS_REPO_URL\n\tbranch: $BINUTILS_BRANCH\n\tcommit: $BINUTILS_COMMIT\n"
          printf "Using Newlib from:\n\trepo: $NEWLIB_REPO_URL\n\tbranch: $NEWLIB_BRANCH\n\tcommit: $NEWLIB_COMMIT\n"
          printf "Using Glibc from:\n\trepo: $GLIBC_REPO_URL\n\tbranch: $GLIBC_BRANCH\n\tcommit: $GLIBC_COMMIT\n"
          printf "Using uClibc from:\n\trepo: $UCLIBC_REPO_URL\n\tbranch: $UCLIBC_BRANCH\n\tcommit: $UCLIBC_COMMIT\n"

          echo "::set-output name=LINUX_COMMIT::$LINUX_COMMIT"
          echo "::set-output name=GCC_COMMIT::$GCC_COMMIT"
          echo "::set-output name=BINUTILS_COMMIT::$BINUTILS_COMMIT"
          echo "::set-output name=NEWLIB_COMMIT::$NEWLIB_COMMIT"
          echo "::set-output name=GLIBC_COMMIT::$GLIBC_COMMIT"
          echo "::set-output name=UCLIBC_COMMIT::$UCLIBC_COMMIT"

  crosstool:
    needs: variables
    runs-on: ubuntu-latest
    steps:
      - name: "clone"
        uses: actions/checkout@v2
      - name: "prereq Linux"
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get install -y gperf help2man libtool-bin
      - name: Update components Git revisions
        run: |
          for d in $(find ./samples -type d | grep snps-) ; do
            echo "Patching config for sample: $d"

            sed -i -e "/CT_LINUX_DEVEL_URL=/s/\".*\"/\"${LINUX_REPO_URL//\//\\/}.git\"/g"                           $d/crosstool.config
            sed -i -e "/CT_GCC_DEVEL_URL=/s/\".*\"/\"${GCC_REPO_URL//\//\\/}.git\"/g"                               $d/crosstool.config
            sed -i -e "/CT_BINUTILS_DEVEL_URL=/s/\".*\"/\"${BINUTILS_REPO_URL//\//\\/}.git\"/g"                     $d/crosstool.config
            sed -i -e "/CT_GDB_DEVEL_URL=/s/\".*\"/\"${BINUTILS_REPO_URL//\//\\/}.git\"/g"                          $d/crosstool.config
            sed -i -e "/CT_NEWLIB_DEVEL_URL=/s/\".*\"/\"${NEWLIB_REPO_URL//\//\\/}.git\"/g"                         $d/crosstool.config
            sed -i -e "/CT_NEWLIB_NANO_DEVEL_URL=/s/\".*\"/\"${NEWLIB_REPO_URL//\//\\/}.git\"/g"                    $d/crosstool.config
            sed -i -e "/CT_GLIBC_DEVEL_URL=/s/\".*\"/\"${GLIBC_REPO_URL//\//\\/}.git\"/g"                           $d/crosstool.config
            sed -i -e "/CT_UCLIBC_NG_DEVEL_URL=/s/\".*\"/\"${UCLIBC_REPO_URL//\//\\/}.git\"/g"                      $d/crosstool.config

            sed -i -e "/CT_LINUX_DEVEL_REVISION=/s/\".*\"/\"${{ needs.variables.outputs.LINUX_COMMIT }}\"/"         $d/crosstool.config
            sed -i -e "/CT_GCC_DEVEL_REVISION=/s/\".*\"/\"${{ needs.variables.outputs.GCC_COMMIT }}\"/"             $d/crosstool.config
            sed -i -e "/CT_BINUTILS_DEVEL_REVISION=/s/\".*\"/\"${{ needs.variables.outputs.BINUTILS_COMMIT }}\"/"   $d/crosstool.config
            sed -i -e "/CT_GDB_DEVEL_REVISION=/s/\".*\"/\"${{ needs.variables.outputs.BINUTILS_COMMIT }}\"/"        $d/crosstool.config
            sed -i -e "/CT_NEWLIB_DEVEL_REVISION=/s/\".*\"/\"${{ needs.variables.outputs.NEWLIB_COMMIT }}\"/"       $d/crosstool.config
            sed -i -e "/CT_NEWLIB_NANO_DEVEL_REVISION=/s/\".*\"/\"${{ needs.variables.outputs.NEWLIB_COMMIT }}\"/"  $d/crosstool.config
            sed -i -e "/CT_GLIBC_DEVEL_REVISION=/s/\".*\"/\"${{ needs.variables.outputs.GLIBC_COMMIT }}\"/"         $d/crosstool.config
            sed -i -e "/CT_UCLIBC_NG_DEVEL_REVISION=/s/\".*\"/\"${{ needs.variables.outputs.UCLIBC_COMMIT }}\"/"    $d/crosstool.config

            grep 'REVISION\|DEVEL_URL' $d/crosstool.config || true
            echo "-----"
          done
      - name: "build ct-ng"
        run: |
          ./bootstrap
          ./configure --prefix=$PWD/.local/
          make
          make install
          tar -cf ct-ng.tar .local/
      - name: "upload ct-ng"
        uses: actions/upload-artifact@v2
        with:
          name: crosstool.ubuntu-latest
          path: ct-ng.tar


  tarballs:
    needs: [ crosstool ]
    runs-on: ${{ matrix.host }}
    strategy:
      matrix:
        host: [ "ubuntu-latest" ]
    steps:
      - name: "download ct-ng"
        uses: actions/download-artifact@v2
        with:
          name: crosstool.${{ matrix.host }}
      - name: "extract ct-ng"
        run: |
          tar -xf ct-ng.tar
      - name: "prereq Linux"
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get install -y gperf help2man libtool-bin
          echo "$GITHUB_WORKSPACE/.local/bin" >> $GITHUB_PATH
      - name: "ct-ng source"
        run: |
          mkdir -p src
          for sample in snps-arc-archs-linux-gnu snps-arc-archs-linux-uclibc\
                snps-arc-multilib-elf32 ; do \
                ct-ng $sample; \
                sed -i -e '/CT_LOG_PROGRESS_BAR/s/y$/n/' .config; \
                sed -i -e '/CT_LOCAL_TARBALLS_DIR/s/HOME/CT_TOP_DIR/' .config; \
                sed -i -e '/CT_PREFIX_DIR/s/HOME/CT_TOP_DIR/' .config; \
                ct-ng olddefconfig; \
                ct-ng source; \
          done
          tar -cvf src.tar src
      - name: "upload sources"
        uses: actions/upload-artifact@v2
        with:
          name: src.tar
          path: src.tar
          retention-days: 2

  toolchains:
    needs: [ tarballs ]
    uses: ./.github/workflows/build-toolchains-arc.yml
    with:
      samples: >-
        [
         "snps-arc-arc700-linux-uclibc",
         "snps-arc-archs-linux-uclibc",
         "snps-arc-archs-linux-gnu",
         "snps-arc32-snps-linux-uclibc",
         "snps-arc32-snps-linux-gnu",
         "snps-arc64-snps-linux-gnu",
         "snps-arc-multilib-elf32",
         "snps-arceb-multilib-elf32",
         "snps-arc64-unknown-elf",
         "snps-x86_64-w64-mingw32"
        ]

  canadian-cross:
    needs: [ toolchains ]
    uses: ./.github/workflows/build-toolchains-arc.yml
    with:
      samples: >-
        [
          "snps-arc-elf32-win",
          "snps-arceb-elf32-win",
          "snps-arc64-elf-win",
          "snps-arc-archs-native-gnu",
          "snps-arc32-snps-native-gnu",
          "snps-arc64-snps-native-gnu"
        ]
      canadian-cross: true


