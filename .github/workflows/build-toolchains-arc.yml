name: Build ARC toolchains

on:
  workflow_call:
    inputs:
      samples:
        description: Stringified JSON list of samples
        required: true
        type: string    
      gcc_commit:
        description: GCC commit ID
        required: false
        type: string
      binutils_commit:
        description: Binutils commit ID
        required: false
        type: string
      newlib_commit:
        description: Newlib commit ID
        required: false
        type: string
      glibc_commit:
        description: glibc commit ID
        required: false
        type: string


jobs:
  build:
    runs-on: ${{ matrix.host }}
    strategy:
      fail-fast: false
      matrix:
        host: [ "ubuntu-latest" ]
        sample: ${{ fromJSON(inputs.samples) }}
    steps:
      - name: download ct-ng
        uses: actions/download-artifact@v2
        with:
          name: crosstool.${{ matrix.host }}
      - name: extract ct-ng
        run: |
          tar -xf ct-ng.tar
      - name: prereq Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get install -y gperf help2man libtool-bin mingw-w64
          echo "${{ github.workspace }}/.local/bin" >> $GITHUB_PATH

      - name: Patch sample with input revisions
        run: |
          echo "GCC: ${{ inputs.gcc_commit }}"
          echo "Binutils: ${{ inputs.binutils_commit }}"
          echo "Newlib: ${{ inputs.newlib_commit }}"
          echo "Glibc: ${{ inputs.glibc_commit }}"

          pushd .local/share/crosstool-ng/samples/${{ matrix.sample }}
            sed -i \ 
                -e "/CT_GCC_DEVEL_REVISION=/s/\".*\"/\"${{ inputs.gcc_commit }}\"/"             \
                -e "/CT_BINUTILS_DEVEL_REVISION=/s/\".*\"/\"${{ inputs.binutils_commit }}\"/"   \
                -e "/CT_GDB_DEVEL_REVISION=/s/\".*\"/\"${{ inputs.binutils_commit }}\"/"        \
                -e "/CT_NEWLIB_DEVEL_REVISION=/s/\".*\"/\"${{ inputs.newlib_commit }}\"/"       \
                -e "/CT_NEWLIB_NANO_DEVEL_REVISION=/s/\".*\"/\"${{ inputs.newlib_commit }}\"/"  \
                -e "/CT_GLIBC_DEVEL_REVISION=/s/\".*\"/\"${{ inputs.glibc_commit }}\"/"         \
                crosstool.config
          popd

      - name: build ${{ matrix.sample }} for ${{ matrix.host }}
        run: |
          mkdir -p src
          ct-ng ${{ matrix.sample }}
          sed -i -e '/CT_LOG_PROGRESS_BAR/s/y$/n/' .config
          sed -i -e '/CT_LOCAL_TARBALLS_DIR/s/HOME/CT_TOP_DIR/' .config
          sed -i -e '/CT_PREFIX_DIR/s/HOME/CT_TOP_DIR/' .config
          ct-ng build
      # - name: upload log
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ matrix.sample }}.${{ matrix.host }}.log
      #     path: |
      #       build.log
      #       .config
      #   if: ${{ always() }}
